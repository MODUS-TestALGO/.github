name: MODUS Release Drafter

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release_drafter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v6
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # üÜï NEU: Reorganisiere Draft sofort nach Update
      - name: Reorganize Draft Release Notes
        if: ${{ steps.release_drafter.outputs.id != '' }}
        shell: pwsh
        env:
          RELEASE_ID: ${{ steps.release_drafter.outputs.id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"
          $Owner = "${{ github.repository_owner }}"
          $Repo = "${{ github.event.repository.name }}"
          
          Write-Host "‚Üí Reorganizing draft release notes..." -ForegroundColor Cyan
          
          # Hole aktuellen Draft-Body
          $release = gh api "repos/$Owner/$Repo/releases/$env:RELEASE_ID" | ConvertFrom-Json
          $currentBody = $release.body
          
          if ([string]::IsNullOrWhiteSpace($currentBody)) {
            Write-Host "‚ö†Ô∏è  Draft body is empty - skipping" -ForegroundColor Yellow
            exit 0
          }
          
          # Pr√ºfe ob Script existiert
          $scriptPath = ".github/scripts/Reorganize-ReleaseNotes.ps1"
          if (-not (Test-Path $scriptPath)) {
            Write-Host "‚ö†Ô∏è  Reorganization script not found - skipping" -ForegroundColor Yellow
            exit 0
          }
          
          try {
            # Reorganisieren
            $reorganized = & $scriptPath -MarkdownInput $currentBody -Owner $Owner -Repo $Repo
            
            if ([string]::IsNullOrWhiteSpace($reorganized)) {
              Write-Host "‚ö†Ô∏è  Reorganization returned empty - keeping original" -ForegroundColor Yellow
              exit 0
            }
            
            # Draft-Body updaten
            $updatePayload = @{ body = $reorganized } | ConvertTo-Json -Depth 10
            $updatePayload | gh api -X PATCH "repos/$Owner/$Repo/releases/$env:RELEASE_ID" --input -
            
            Write-Host "‚úÖ Draft reorganized successfully!" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ö†Ô∏è  Reorganization failed: $($_.Exception.Message)" -ForegroundColor Yellow
            Write-Host "   Keeping original draft body" -ForegroundColor Yellow
            # Fehler nicht durchreichen - Draft bleibt halt flach
            exit 0
          }
